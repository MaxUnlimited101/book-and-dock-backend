// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(BookAndDockContext))]
    partial class BookAndDockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('bookings_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DockingSpotId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("People")
                        .HasColumnType("integer");

                    b.Property<int>("SailorId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("Bookings_pkey");

                    b.HasIndex("DockingSpotId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SailorId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Backend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('comments_id_seq'::regclass)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("GuideId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Comments_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GuideId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Backend.Models.DockingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('dockingspots_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("PortId")
                        .HasColumnType("integer");

                    b.Property<double?>("PricePerNight")
                        .HasColumnType("double precision");

                    b.Property<double?>("PricePerPerson")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("DockingSpots_pkey");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PortId");

                    b.ToTable("DockingSpots");
                });

            modelBuilder.Entity("Backend.Models.Guide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('guides_id_seq'::regclass)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Guides_pkey");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("Backend.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('images_id_seq'::regclass)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("GuideId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Images_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GuideId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Backend.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DockingSpotId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Locations_pkey");

                    b.HasIndex("DockingSpotId");

                    b.HasIndex("PortId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('notifications_id_seq'::regclass)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Notifications_pkey");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('paymentmethods_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("PaymentMethods_pkey");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('port_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Ports_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('reviews_id_seq'::regclass)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DockId")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Reviews_pkey");

                    b.HasIndex("DockId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('roles_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("Roles_pkey");

                    b.HasIndex(new[] { "Name" }, "Roles_Name_key")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('services_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DockingSpotId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("Services_pkey");

                    b.HasIndex("DockingSpotId");

                    b.HasIndex("PortId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('users_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "IDX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.HasOne("Backend.Models.DockingSpot", "DockingSpot")
                        .WithMany("Bookings")
                        .HasForeignKey("DockingSpotId")
                        .IsRequired()
                        .HasConstraintName("FK_DockingSpotId");

                    b.HasOne("Backend.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_PaymentMethodId");

                    b.HasOne("Backend.Models.User", "Sailor")
                        .WithMany("Bookings")
                        .HasForeignKey("SailorId")
                        .IsRequired()
                        .HasConstraintName("FK_SailorId");

                    b.Navigation("DockingSpot");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Sailor");
                });

            modelBuilder.Entity("Backend.Models.Comment", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedBy");

                    b.HasOne("Backend.Models.Guide", "Guide")
                        .WithMany("Comments")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK_GuideId");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("Backend.Models.DockingSpot", b =>
                {
                    b.HasOne("Backend.Models.User", "Owner")
                        .WithMany("DockingSpots")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_OwnerId");

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("DockingSpots")
                        .HasForeignKey("PortId")
                        .IsRequired()
                        .HasConstraintName("FK_PortId");

                    b.Navigation("Owner");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.Guide", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByNavigation")
                        .WithMany("Guides")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AuthorId");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Backend.Models.Image", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByNavigation")
                        .WithMany("Images")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedBy");

                    b.HasOne("Backend.Models.Guide", "Guide")
                        .WithMany("Images")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK_GuideId");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("Backend.Models.Location", b =>
                {
                    b.HasOne("Backend.Models.DockingSpot", "DockingSpot")
                        .WithMany("Locations")
                        .HasForeignKey("DockingSpotId")
                        .HasConstraintName("FK_DockingSpotId");

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("Locations")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_PortId");

                    b.Navigation("DockingSpot");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.HasOne("Backend.Models.User", "Owner")
                        .WithMany("Ports")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.HasOne("Backend.Models.Port", "Dock")
                        .WithMany("Reviews")
                        .HasForeignKey("DockId")
                        .IsRequired()
                        .HasConstraintName("FK_PortId");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CreatedBy");

                    b.Navigation("Dock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Service", b =>
                {
                    b.HasOne("Backend.Models.DockingSpot", "DockingSpot")
                        .WithMany("Services")
                        .HasForeignKey("DockingSpotId")
                        .HasConstraintName("FK_DockingSpotId");

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("Services")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_PortId");

                    b.Navigation("DockingSpot");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Models.DockingSpot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Locations");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Backend.Models.Guide", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Backend.Models.PaymentMethod", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Navigation("DockingSpots");

                    b.Navigation("Locations");

                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("DockingSpots");

                    b.Navigation("Guides");

                    b.Navigation("Images");

                    b.Navigation("Notifications");

                    b.Navigation("Ports");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
